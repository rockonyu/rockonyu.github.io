{"pageProps":{"post":{"title":"優化開發時期 webpack 的編譯速度","slug":"_deprecated/optimize-webpack-compile","content":"<h2>調整策略</h2>\n<ol>\n<li>使用 <a href=\"https://github.com/stephencookdev/speed-measure-webpack-plugin\">speed-measure-webpack-plugin</a> 可以觀察目前消耗最多的地方</li>\n<li>webpack 開發階段不要使用 production 模式，可避免反覆優化</li>\n<li>使用 <a href=\"https://github.com/webpack-contrib/cache-loader\">cache-loader</a> 與 <a href=\"https://github.com/webpack-contrib/thread-loader\">thread-loader</a> 加速與暫存編譯後的檔案</li>\n<li>以 webpack 的 <a href=\"https://webpack.js.org/configuration/watch/#root\">watch mode</a> 作為優化目標</li>\n</ol>\n<p>這個專案在開發時期使用 production 模式，會讓 <a href=\"https://webpack.js.org/plugins/terser-webpack-plugin/#root\">Terser</a> 提早優化，因此改回使用 development 模式編譯，並加上 <code>cache loader</code> 與 <code>thread loader</code> 後，可將原本平均兩分鐘的編譯時間縮短為 15 秒左右，效果顯著。</p>\n<p>未來會朝向開啟 watch 模式進行調整，希望編譯單檔的時間能夠在 2 秒內結束。</p>\n<h2>額外參考</h2>\n<ul>\n<li>https://medium.com/@shinychang/webpack-%E6%9C%80%E4%BD%B3%E5%8C%96-cache-loader-e17f5651a941</li>\n</ul>"}},"__N_SSG":true}