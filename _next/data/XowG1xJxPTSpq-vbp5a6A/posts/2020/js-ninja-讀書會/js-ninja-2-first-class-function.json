{"pageProps":{"post":{"title":"JS Ninja: 2. First-Class Function","date":"2020-07-11T00:00:00.000Z","slug":"2020/js-ninja-讀書會/js-ninja-2-first-class-function","content":"<p>簡單的筆記與紀錄額外參考，原作：忍者：JavaScript  開發技巧探秘</p>\n<h2 id=\"ch3---初探頭等函式定義與引數\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#ch3---初探頭等函式定義與引數\"><span class=\"fas fa-link fa-xs mr-3\"></span></a>CH3 - 初探頭等函式：定義與引數</h2>\n<h3 id=\"31-使用函式與否的差異為何\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#31-使用函式與否的差異為何\"><span class=\"fas fa-link fa-xs mr-3\"></span></a>3.1 使用函式與否的差異為何？</h3>\n<p>JavaScript 中物件與函式有以下特性：</p>\n<ul>\n<li>透過實值 (literal) 建立</li>\n<li>指派給變數、陣列資料與其他物件的屬性</li>\n<li>作為引數傳遞給函式</li>\n<li>可以做為函式的回傳值</li>\n<li>擁有可動態建立和指派的屬性</li>\n</ul>\n<p>頭等函式的其中一個特性是可以作為引數傳遞給函式。</p>\n<p>回呼函式是設置一個預備在稍後呼叫的函式，藉由瀏覽器在事件處理階段或透過其他程式碼。</p>\n<p>JavaScript  最重要的特性之一是能夠在程式的任何地方建立函式，使程式碼更緊湊易理解，還可以避免全域命名空間被汙染 (例如箭頭函式)。</p>\n<p>ex. 使用比對器進行排序，不需要考慮排序演算法的細節：</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> values = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>]\n\nvalues.<span class=\"hljs-title hljs-function\">sort</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">values, values</span>) {\n  <span class=\"hljs-keyword\">return</span> value1 - value2\n})\n</code></pre>\n<h3 id=\"32-函式作為物件的有趣之處\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#32-函式作為物件的有趣之處\"><span class=\"fas fa-link fa-xs mr-3\"></span></a>3.2 函式作為物件的有趣之處</h3>\n<p>我們將屬性附加到函式上，可以用來：</p>\n<ul>\n<li>儲存函式</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> store = {\n  <span class=\"hljs-attr\">nextId</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">cache</span>: {},\n  <span class=\"hljs-attr\">add</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) {\n    <span class=\"hljs-keyword\">if</span> (!fn.<span class=\"hljs-property\">id</span>) {\n      fn.<span class=\"hljs-property\">id</span> = <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">nextId</span>++\n      <span class=\"hljs-variable hljs-language\">this</span>.<span class=\"hljs-property\">cache</span>[fn.<span class=\"hljs-property\">id</span>] = fn\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    }\n  },\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title hljs-function\">ninja</span>(<span class=\"hljs-params\"></span>) {}\n\n<span class=\"hljs-title hljs-function\">assert</span>(store.<span class=\"hljs-title hljs-function\">add</span>(ninja), <span class=\"hljs-string\">'Function was safely added.'</span>)\n<span class=\"hljs-title hljs-function\">assert</span>(!store.<span class=\"hljs-title hljs-function\">add</span>(ninja), <span class=\"hljs-string\">'But it was only added once.'</span>)\n</code></pre>\n<ul>\n<li>自我記憶函式</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title hljs-function\">isPrime</span>(<span class=\"hljs-params\">value</span>) {\n  <span class=\"hljs-keyword\">if</span> (!isPrime.<span class=\"hljs-property\">answers</span>) {\n    isPrime.<span class=\"hljs-property\">answers</span> = {}\n  }\n\n  <span class=\"hljs-keyword\">if</span> (isPrime.<span class=\"hljs-property\">answers</span>[value] !== <span class=\"hljs-literal\">undefined</span>) {\n    <span class=\"hljs-keyword\">return</span> isPrime.<span class=\"hljs-property\">answers</span>[value]\n  }\n\n  <span class=\"hljs-keyword\">var</span> prime = value !== <span class=\"hljs-number\">0</span> &#x26;&#x26; value !== <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">2</span>; i &#x3C; value; i++) {\n    <span class=\"hljs-keyword\">if</span> (value % i === <span class=\"hljs-number\">0</span>) {\n      prime = <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-keyword\">break</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> (isPrime.<span class=\"hljs-property\">answers</span>[value] = prime) <span class=\"hljs-comment\">// 儲存計算結果</span>\n}\n</code></pre>\n<p>pros:</p>\n<ul>\n<li>藉由取得之前計算的值改善呼叫函式的效能</li>\n<li>背景作業，不需要執行特殊請求或額外初始化</li>\n</ul>\n<p>cons:</p>\n<ul>\n<li>任何形式的暫存都式花費記憶體空間換取效能</li>\n<li>暫存不應該與業務邏輯綁在一起</li>\n<li>很難對這樣的演算法進行負載測試或測量效能，因為結果取決於之前的輸入</li>\n</ul>\n<h3 id=\"33-定義函式\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#33-定義函式\"><span class=\"fas fa-link fa-xs mr-3\"></span></a>3.3 定義函式</h3>\n<ul>\n<li>函式宣告 (declaration) 與函式表達式 (expression)</li>\n<li>箭頭函式</li>\n<li>函式建構式</li>\n<li>生成器 (generator)</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 獨立函式宣告</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title hljs-function\">myFunctionDeclaration</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 內部函式宣告</span>\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title hljs-function\">innerFunction</span>(<span class=\"hljs-params\"></span>) {}\n}\n\n<span class=\"hljs-comment\">// 函式表達式與變數宣告 &#x26; 指派</span>\n<span class=\"hljs-keyword\">var</span> myFunc = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {}\n<span class=\"hljs-comment\">// 函式表達式作為回呼引數</span>\n<span class=\"hljs-title hljs-function\">myFunc</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 函式表達式作為回傳值</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {}\n})\n\n<span class=\"hljs-comment\">// 具名的函式表達式做為立即函式的一部分</span>\n;(<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title hljs-function\">namedFunctionExpression</span>(<span class=\"hljs-params\"></span>) {})()\n\n<span class=\"hljs-comment\">// 作為一元運作子的引數而被立即呼叫的函式表達式</span>\n;+(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {})()\n;-(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {})()\n!(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {})()\n~(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {})()\n</code></pre>\n<p>立即函式 (IIFE)</p>\n<pre><code class=\"hljs language-javascript\">;(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {})(<span class=\"hljs-number\">3</span>)\n</code></pre>\n<p>箭頭函式</p>\n<ul>\n<li>param => expression</li>\n<li>主體如果只有表達式，即是函式的回傳值</li>\n<li>如果沒有 return 敘述句，呼叫的結果是 undefined</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> values = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>]\nvalues.<span class=\"hljs-title hljs-function\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value1, value2</span>) =></span> value1 - value2)\n</code></pre>\n<h3 id=\"34-引數-argument-與函式參數-parameter\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#34-引數-argument-與函式參數-parameter\"><span class=\"fas fa-link fa-xs mr-3\"></span></a>3.4 引數 (argument) 與函式參數 (parameter)</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 函式參數</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title hljs-function\">skulk</span>(<span class=\"hljs-params\">ninja</span>) {\n  <span class=\"hljs-comment\">// 函式引數</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title hljs-function\">performAction</span>(ninja, <span class=\"hljs-string\">'skulking'</span>)\n}\n</code></pre>\n<p>使用不定參數</p>\n<ul>\n<li>需要放在最後一個函式參數，否則會得到 Syntax Error</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title hljs-function\">multiMax</span>(<span class=\"hljs-params\">first, ...remainingNumbers</span>) {\n  <span class=\"hljs-keyword\">var</span> sorted = remainingNumbers.<span class=\"hljs-title hljs-function\">sort</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) {\n    <span class=\"hljs-keyword\">return</span> b - a\n  })\n  <span class=\"hljs-keyword\">return</span> first * sorted[<span class=\"hljs-number\">0</span>]\n}\n</code></pre>\n<ul>\n<li>使用預設參數</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title hljs-function\">performAction</span>(<span class=\"hljs-params\">ninja, action = <span class=\"hljs-string\">'skulking'</span></span>) {\n  <span class=\"hljs-keyword\">return</span> ninja + <span class=\"hljs-string\">' '</span> + action\n}\n</code></pre>\n<h3 id=\"35-總結\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#35-總結\"><span class=\"fas fa-link fa-xs mr-3\"></span></a>3.5 總結</h3>\n<h3 id=\"補充參考\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#補充參考\"><span class=\"fas fa-link fa-xs mr-3\"></span></a>補充參考</h3>\n<ul>\n<li><a href=\"https://www.notion.so/Chapter3-df2158c43739481bafbf6a1b43709d70\">阿福的筆記</a></li>\n<li><a href=\"https://www.coderbridge.com/@waynelee2048/a58346d15d2f4100ae6eebd8ed34aff3\">阿寬的筆記</a></li>\n</ul>"}},"__N_SSG":true}